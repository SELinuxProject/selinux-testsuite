#
################# SCTP selinux-testsuite policy module ######################
#

attribute sctpsocketdomain;

#
######################## NetLabel labels ############################
#
# Fall-back labeling label:
type netlabel_sctp_peer_t;
corenet_in_generic_node(netlabel_sctp_peer_t)
corenet_in_generic_if(netlabel_sctp_peer_t)

# Permit nfsd and its kernel threads to receive these packets.
# This is required when running the testsuite on a labeled NFS mount.
gen_require(`
	type kernel_t;
	type nfsd_t;
')
allow kernel_t netlabel_sctp_peer_t:peer recv;
allow nfsd_t netlabel_sctp_peer_t:peer recv;

# Default label for CIPSO/CALIPSO:
gen_require(`
	type netlabel_peer_t;
')
mcs_constrained(netlabel_peer_t)

#
############### Declare an attribute that will hold all peers ###############
###############           allowed an association              ###############
#
attribute sctp_assoc_peers;

typeattribute netlabel_peer_t sctp_assoc_peers;
typeattribute netlabel_sctp_peer_t sctp_assoc_peers;
allow sctp_assoc_peers sctp_assoc_peers:sctp_socket { association };

#
##################### SCTP portcon for ports 1024-65535 ######################
#
corenet_sctp_bind_all_unreserved_ports(sctpsocketdomain)
corenet_sctp_connect_all_unreserved_ports(sctpsocketdomain)

# For writing to flag file:
allow sctpsocketdomain test_file_t:fifo_file rw_file_perms;

#
################################## Server ###################################
#
type test_sctp_server_t;
testsuite_domain_type(test_sctp_server_t)
unconfined_runs_test(test_sctp_server_t)
typeattribute test_sctp_server_t sctpsocketdomain;
allow test_sctp_server_t self:sctp_socket create_stream_socket_perms;
allow test_sctp_server_t netlabel_sctp_peer_t:peer { recv };
corenet_sctp_bind_all_nodes(test_sctp_server_t)
corenet_inout_generic_node(test_sctp_server_t)
corenet_inout_generic_if(test_sctp_server_t)
mcs_constrained(test_sctp_server_t)

#### Verify that the server cannot start when using port < 1024 ####
# neverallow test_sctp_server_t reserved_port_t:sctp_socket { name_bind };
# Stop clutter in audit log for this test:
dontaudit test_sctp_server_t self:netlink_route_socket { create getattr bind };
dontaudit test_sctp_server_t self:udp_socket { getattr connect };

#
############################### Client #################################
#
type test_sctp_client_t;
testsuite_domain_type(test_sctp_client_t)
unconfined_runs_test(test_sctp_client_t)
typeattribute test_sctp_client_t sctpsocketdomain;
allow test_sctp_client_t self:sctp_socket create_stream_socket_perms;
allow test_sctp_server_t test_sctp_client_t:peer { recv };
allow test_sctp_client_t test_sctp_server_t:peer { recv };
allow test_sctp_client_t netlabel_sctp_peer_t:peer { recv };
corenet_inout_generic_node(test_sctp_client_t)
corenet_inout_generic_if(test_sctp_client_t)

#
#################### Deny peer recv permission Client ########################
#
type test_sctp_deny_peer_client_t;
testsuite_domain_type(test_sctp_deny_peer_client_t)
unconfined_runs_test(test_sctp_deny_peer_client_t)
typeattribute test_sctp_deny_peer_client_t sctpsocketdomain;
allow test_sctp_deny_peer_client_t self:sctp_socket create_stream_socket_perms;
corenet_inout_generic_node(test_sctp_deny_peer_client_t)
corenet_inout_generic_if(test_sctp_deny_peer_client_t)

allow test_sctp_deny_peer_client_t test_sctp_server_packet_t:packet { send };
allow test_sctp_server_t test_sctp_deny_peer_client_t:peer { recv };
allow test_sctp_client_t test_sctp_deny_peer_client_t:sctp_socket { association };

#
####################### Deny association permission #########################
#

# Declare this type for NetLabel etc. to allow the packet through the system,
# however do not allow an association:
type deny_assoc_sctp_peer_t;
allow test_sctp_server_t deny_assoc_sctp_peer_t:peer { recv };
allow test_sctp_client_t deny_assoc_sctp_peer_t:peer {recv };
corenet_inout_generic_node(deny_assoc_sctp_peer_t)
corenet_inout_generic_if(deny_assoc_sctp_peer_t)

# Permit nfsd and its kernel threads to receive these packets.
# This is required when running the testsuite on a labeled NFS mount.
gen_require(`
	type kernel_t;
	type nfsd_t;
')
allow kernel_t deny_assoc_sctp_peer_t:peer recv;
allow nfsd_t deny_assoc_sctp_peer_t:peer recv;

#
############################# Connectx #################################
#
type test_sctp_connectx_t;
testsuite_domain_type(test_sctp_connectx_t)
unconfined_runs_test(test_sctp_connectx_t)
typeattribute test_sctp_connectx_t sctpsocketdomain;
allow test_sctp_connectx_t self:sctp_socket create_stream_socket_perms;
corenet_sctp_bind_all_nodes(test_sctp_connectx_t)
corenet_inout_generic_node(test_sctp_connectx_t)

#
############################# Deny Connectx #################################
#
type test_sctp_deny_connectx_t;
testsuite_domain_type(test_sctp_deny_connectx_t)
unconfined_runs_test(test_sctp_deny_connectx_t)
typeattribute test_sctp_deny_connectx_t sctpsocketdomain;
allow test_sctp_deny_connectx_t self:sctp_socket { create listen accept bind ioctl read getattr write getopt setopt };
corenet_sctp_bind_all_nodes(test_sctp_deny_connectx_t)
corenet_inout_generic_node(test_sctp_deny_connectx_t)

#
############################## Bindx #####################################
#
type test_sctp_bindx_t;
testsuite_domain_type(test_sctp_bindx_t)
unconfined_runs_test(test_sctp_bindx_t)
typeattribute test_sctp_bindx_t sctpsocketdomain;
allow test_sctp_bindx_t self:sctp_socket create_stream_socket_perms;
corenet_sctp_bind_all_nodes(test_sctp_bindx_t)
corenet_inout_generic_node(test_sctp_bindx_t)

#
############################## Deny Bindx ###################################
#
type test_sctp_deny_bindx_t;
testsuite_domain_type(test_sctp_deny_bindx_t)
unconfined_runs_test(test_sctp_deny_bindx_t)
typeattribute test_sctp_deny_bindx_t sctpsocketdomain;
allow test_sctp_deny_bindx_t self:sctp_socket { create ioctl read getattr write getopt setopt };
corenet_sctp_bind_all_nodes(test_sctp_deny_bindx_t)
corenet_inout_generic_node(test_sctp_deny_bindx_t)

#
############################# ASCONF Server ##############################
#
type sctp_asconf_params_server_t;
testsuite_domain_type(sctp_asconf_params_server_t)
unconfined_runs_test(sctp_asconf_params_server_t)
typeattribute sctp_asconf_params_server_t sctpsocketdomain;
allow sctp_asconf_params_server_t self:sctp_socket { create listen bind ioctl read getattr write getopt setopt };
corenet_sctp_bind_all_nodes(sctp_asconf_params_server_t)
corenet_inout_generic_node(sctp_asconf_params_server_t)

#
############################# ASCONF Client ##############################
#
type sctp_asconf_params_client_t;
testsuite_domain_type(sctp_asconf_params_client_t)
unconfined_runs_test(sctp_asconf_params_client_t)
typeattribute sctp_asconf_params_client_t sctpsocketdomain;
allow sctp_asconf_params_client_t self:sctp_socket { create connect ioctl read getattr write getopt setopt };
corenet_sctp_bind_all_nodes(sctp_asconf_params_client_t)
corenet_inout_generic_node(sctp_asconf_params_client_t)
corenet_inout_generic_if(sctp_asconf_params_client_t)

# When running locally need this rule, else Client error 'Dynamic Address Reconfiguration'
allow sctp_asconf_params_server_t sctp_asconf_params_client_t:sctp_socket { connect };
# net/sctp/socket.c sctp_setsockopt_peer_primary_addr(setsockopt(SCTP_PRIMARY_ADDR))
allow sctp_asconf_params_client_t self:sctp_socket { bind };

#
################## ASCONF Client - Deny SCTP_PRIMARY_ADDR ####################
#
type sctp_asconf_deny_pri_addr_client_t;
testsuite_domain_type(sctp_asconf_deny_pri_addr_client_t)
unconfined_runs_test(sctp_asconf_deny_pri_addr_client_t)
typeattribute sctp_asconf_deny_pri_addr_client_t sctpsocketdomain;
allow sctp_asconf_deny_pri_addr_client_t self:sctp_socket { create connect ioctl read getattr write getopt setopt };
corenet_sctp_bind_all_nodes(sctp_asconf_deny_pri_addr_client_t)
corenet_inout_generic_node(sctp_asconf_deny_pri_addr_client_t)
corenet_inout_generic_if(sctp_asconf_deny_pri_addr_client_t)

# net/sctp/sm_make_chunk.c sctp_process_asconf_param() SCTP_PARAM_ADD_IP and SCTP_PARAM_SET_PRIMARY
allow sctp_asconf_params_server_t sctp_asconf_deny_pri_addr_client_t:sctp_socket { connect };
# net/sctp/socket.c sctp_setsockopt_primary_addr() SCTP_PRIMARY_ADDR
# neverallow sctp_asconf_deny_pri_addr_client_t self:sctp_socket { bind };

#
### ASCONF Client - Deny Server SCTP_PARAM_ADD_IP / SCTP_PARAM_SET_PRIMARY ###
#
type sctp_asconf_deny_param_add_client_t;
testsuite_domain_type(sctp_asconf_deny_param_add_client_t)
unconfined_runs_test(sctp_asconf_deny_param_add_client_t)
typeattribute sctp_asconf_deny_param_add_client_t sctpsocketdomain;
allow sctp_asconf_deny_param_add_client_t self:sctp_socket { create connect ioctl read getattr write getopt setopt };
corenet_sctp_bind_all_nodes(sctp_asconf_deny_param_add_client_t)
corenet_inout_generic_node(sctp_asconf_deny_param_add_client_t)
corenet_inout_generic_if(sctp_asconf_deny_param_add_client_t)

# net/sctp/sm_make_chunk.c sctp_process_asconf_param() SCTP_PARAM_ADD_IP and SCTP_PARAM_SET_PRIMARY
# neverallow sctp_asconf_params_server_t sctp_asconf_deny_param_add_client_t:sctp_socket { connect };

#
######################### SECMARK-specific policy ############################
#
type test_sctp_server_packet_t;
allow unconfined_t test_sctp_server_packet_t:packet { relabelto };
allow test_sctp_server_t test_sctp_server_packet_t:packet { send recv };
allow test_sctp_client_t test_sctp_server_packet_t:packet { send recv };

#
####### Required for getaddrinfo(3), if_nametoindex(3) type functions ########
########## when resolving IPv6 link local addresses e.g. addr%<if> ###########
#
gen_require(`
	type sysctl_net_t;
')

allow sctpsocketdomain proc_net_t:file { read };
allow sctpsocketdomain sysctl_net_t:dir { search };
allow sctpsocketdomain self:udp_socket { create };
allow sctpsocketdomain self:unix_dgram_socket { create ioctl };

#
############ Allow these domains to be entered from sysadm domain ############
#
miscfiles_domain_entry_test_files(sctpsocketdomain)
userdom_sysadm_entry_spec_domtrans_to(sctpsocketdomain)
