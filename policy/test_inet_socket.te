#################################
#
# Policy for testing INET domain sockets.
#

attribute inetsocketdomain;

# Allow NetLabel traffic to be sent/received.
gen_require(`
	type netlabel_peer_t;
')
corenet_inout_generic_if(netlabel_peer_t)
corenet_inout_generic_node(netlabel_peer_t)

# Do not break NFS when we load NetLabel configuration.
gen_require(`
	type kernel_t;
')
corenet_all_recvfrom_unlabeled(kernel_t)

# Domain for server process.
type test_inet_server_t;
testsuite_domain_type(test_inet_server_t)
unconfined_runs_test(test_inet_server_t)
typeattribute test_inet_server_t inetsocketdomain;
allow test_inet_server_t self:tcp_socket create_stream_socket_perms;
allow test_inet_server_t self:udp_socket create_socket_perms;
corenet_tcp_bind_all_unreserved_ports(test_inet_server_t)
corenet_udp_bind_all_unreserved_ports(test_inet_server_t)
corenet_tcp_bind_all_nodes(test_inet_server_t)
corenet_udp_bind_all_nodes(test_inet_server_t)
corenet_inout_generic_if(test_inet_server_t)
corenet_inout_generic_node(test_inet_server_t)

# For writing to flag file:
allow test_inet_server_t test_file_t:fifo_file rw_file_perms;

# We need to ensure that the test domain is MCS constrained.
## newer systems, e.g. Fedora and RHEL >= 7.x
ifdef(`mcs_constrained', `
	mcs_constrained(test_inet_server_t)
')
## older systems, e.g. RHEL == 6.x
ifdef(`mcs_untrusted_proc', `
	mcs_untrusted_proc(test_inet_server_t)
')

# Domain for client process.
type test_inet_client_t;
testsuite_domain_type(test_inet_client_t)
unconfined_runs_test(test_inet_client_t)
typeattribute test_inet_client_t inetsocketdomain;
allow test_inet_client_t self:tcp_socket create_stream_socket_perms;
allow test_inet_client_t self:udp_socket create_socket_perms;
corenet_tcp_connect_all_unreserved_ports(test_inet_client_t)
corenet_inout_generic_if(test_inet_client_t)
corenet_inout_generic_node(test_inet_client_t)

# The server can receive labeled packets from the client.
allow test_inet_server_t test_inet_client_t:peer recv;
# And vice versa.
allow test_inet_client_t test_inet_server_t:peer recv;

# Domain for a client process not authorized to communicate with the server.
type test_inet_bad_client_t;
testsuite_domain_type(test_inet_bad_client_t)
unconfined_runs_test(test_inet_bad_client_t)
typeattribute test_inet_bad_client_t inetsocketdomain;
allow test_inet_bad_client_t self:tcp_socket create_stream_socket_perms;
allow test_inet_bad_client_t self:udp_socket create_socket_perms;
corenet_tcp_connect_all_unreserved_ports(test_inet_bad_client_t)
corenet_inout_generic_if(test_inet_bad_client_t)
corenet_inout_generic_node(test_inet_bad_client_t)

#
# Policy for testing bind(2) and connect(2) checks.
#

# Domain for a process allowed to bind(2).
type test_inet_bind_t;
testsuite_domain_type(test_inet_bind_t)
unconfined_runs_test(test_inet_bind_t)
typeattribute test_inet_bind_t inetsocketdomain;
allow test_inet_bind_t self:tcp_socket create_stream_socket_perms;
allow test_inet_bind_t self:udp_socket create_socket_perms;
corenet_tcp_bind_all_unreserved_ports(test_inet_bind_t)
corenet_udp_bind_all_unreserved_ports(test_inet_bind_t)
corenet_tcp_bind_all_nodes(test_inet_bind_t)
corenet_udp_bind_all_nodes(test_inet_bind_t)

# Domain for a process not allowed name_bind permission to the port.
type test_inet_no_name_bind_t;
testsuite_domain_type(test_inet_no_name_bind_t)
unconfined_runs_test(test_inet_no_name_bind_t)
typeattribute test_inet_no_name_bind_t inetsocketdomain;
allow test_inet_no_name_bind_t self:tcp_socket create_stream_socket_perms;
allow test_inet_no_name_bind_t self:udp_socket create_socket_perms;
corenet_tcp_bind_all_nodes(test_inet_no_name_bind_t)
corenet_udp_bind_all_nodes(test_inet_no_name_bind_t)

# Domain for a process not allowed node_bind permission to the node.
type test_inet_no_node_bind_t;
testsuite_domain_type(test_inet_no_node_bind_t)
unconfined_runs_test(test_inet_no_node_bind_t)
typeattribute test_inet_no_node_bind_t inetsocketdomain;
allow test_inet_no_node_bind_t self:tcp_socket create_stream_socket_perms;
allow test_inet_no_node_bind_t self:udp_socket create_socket_perms;
corenet_tcp_bind_all_unreserved_ports(test_inet_no_node_bind_t)
corenet_udp_bind_all_unreserved_ports(test_inet_no_node_bind_t)

# Domain for a process allowed to connect(2).
type test_inet_connect_t;
testsuite_domain_type(test_inet_connect_t)
unconfined_runs_test(test_inet_connect_t)
typeattribute test_inet_connect_t inetsocketdomain;
allow test_inet_connect_t self:tcp_socket create_stream_socket_perms;
allow test_inet_connect_t self:udp_socket create_socket_perms;
corenet_tcp_connect_all_unreserved_ports(test_inet_connect_t)
corenet_tcp_bind_all_unreserved_ports(test_inet_connect_t)
corenet_tcp_bind_all_nodes(test_inet_connect_t)
corenet_inout_generic_if(test_inet_connect_t)
corenet_inout_generic_node(test_inet_connect_t)

# Domain for a process not allowed name_connect permission.
type test_inet_no_name_connect_t;
testsuite_domain_type(test_inet_no_name_connect_t)
unconfined_runs_test(test_inet_no_name_connect_t)
typeattribute test_inet_no_name_connect_t inetsocketdomain;
allow test_inet_no_name_connect_t self:tcp_socket create_stream_socket_perms;
allow test_inet_no_name_connect_t self:udp_socket create_socket_perms;
corenet_tcp_bind_all_unreserved_ports(test_inet_no_name_connect_t)
corenet_tcp_bind_all_nodes(test_inet_no_name_connect_t)
corenet_inout_generic_if(test_inet_no_name_connect_t)
corenet_inout_generic_node(test_inet_no_name_connect_t)

#
# Labeled IPSEC-specific policy.
#

# For ipsec-load/ipsec-flush.
gen_require(`
	type unconfined_t;
')
type test_spd_t;
allow unconfined_t inetsocketdomain:association setcontext;
allow unconfined_t test_spd_t:association setcontext;

# Each of the test client domains must match against the SPD entry
# in order to use labeled IPSEC.
allow test_inet_client_t test_spd_t:association polmatch;
allow test_inet_bad_client_t test_spd_t:association polmatch;

#
# SECMARK-specific policy
#

type test_server_packet_t;
allow unconfined_t test_server_packet_t:packet relabelto;
allow test_inet_server_t test_server_packet_t:packet { send recv };
allow test_inet_client_t test_server_packet_t:packet { send recv };

#
# Common rules for all inet socket test domains.
#

# Send/recv unlabeled packets.
kernel_sendrecv_unlabeled_packets(inetsocketdomain)
kernel_recvfrom_unlabeled_peer(inetsocketdomain)

# Allow all of these domains to be entered from the sysadm domain.
miscfiles_domain_entry_test_files(inetsocketdomain)
userdom_sysadm_entry_spec_domtrans_to(inetsocketdomain)
