#################################
# 
# Policy for testing socket permissions
#

# Base domain for socket tests; has just about all socket permissions
type test_socket_base_t, domain, socketdomain, testdomain;
type test_socket_secondary_t, domain, socketdomain, testdomain;
can_network(test_socket_base_t)
allow test_socket_base_t port_t:{ tcp_socket udp_socket } name_bind;
can_network(test_socket_secondary_t)

allow test_socket_base_t test_socket_base_t:tcp_socket { relabelfrom relabelto };
can_tcp_connect(test_socket_base_t,test_socket_base_t)
can_unix_connect(test_socket_base_t,test_socket_base_t)
can_udp_send(test_socket_base_t,test_socket_base_t)

allow test_socket_secondary_t test_socket_base_t:tcp_socket { relabelfrom relabelto };
can_tcp_connect(test_socket_secondary_t,test_socket_base_t)
can_unix_connect(test_socket_secondary_t,test_socket_base_t)

allow test_socket_base_t test_socket_secondary_t:tcp_socket {newconn acceptfrom recvfrom read};
allow test_socket_secondary_t self:tcp_socket {recvfrom connectto acceptfrom read};

# for xxx_secure() socket calls
allow test_socket_base_t test_socket_secondary_t:tcp_socket create_stream_socket_perms;
allow test_socket_base_t test_socket_secondary_t:unix_stream_socket create_stream_socket_perms;
allow test_socket_base_t node_lo_t:node {enforce_dest};

allow test_socket_base_t test_socket_noconnect_t:tcp_socket { recvfrom acceptfrom };
allow test_socket_base_t test_socket_norecv_t:tcp_socket { recvfrom acceptfrom };

# Domain that doesn't have recvfrom permission
type test_socket_norecv_t, domain, socketdomain, testdomain;
allow test_socket_norecv_t self:udp_socket create_socket_perms;
allow test_socket_norecv_t self:tcp_socket create_stream_socket_perms;
allow test_socket_norecv_t netif_type:netif packet_perms;
allow test_socket_norecv_t netmsg_type:tcp_socket { connectto acceptfrom };
allow test_socket_norecv_t node_type:node packet_perms;

# Domain that without connect permission
type test_socket_noconnect_t, domain, socketdomain, testdomain;
allow test_socket_noconnect_t self:udp_socket create_socket_perms;
allow test_socket_noconnect_t self:tcp_socket create_stream_socket_perms;
allow test_socket_noconnect_t netif_type:netif packet_perms;
allow test_socket_noconnect_t netmsg_type:{ udp_socket tcp_socket rawip_socket } recvfrom;
allow test_socket_noconnect_t node_type:node packet_perms;
allow test_socket_noconnect_t port_t:tcp_socket name_bind;

# A domain that has acceptfrom permission, but not accept permission
type test_socket_noaccept_t, domain, socketdomain, testdomain;
allow test_socket_noaccept_t self:udp_socket create_socket_perms;
allow test_socket_noaccept_t self:tcp_socket create_stream_socket_perms;
allow test_socket_noaccept_t netif_type:netif packet_perms;
allow test_socket_noaccept_t netmsg_type:{ udp_socket tcp_socket rawip_socket } recvfrom;
allow test_socket_noaccept_t netmsg_type:tcp_socket { connectto acceptfrom };
allow test_socket_noaccept_t node_type:node packet_perms;
allow test_socket_noaccept_t port_t:tcp_socket name_bind;

# allow socket to be labeled back and forth (with fchsid call)
allow test_socket_base_t test_socket_noaccept_t:tcp_socket { relabelfrom relabelto };
allow test_socket_noaccept_t test_socket_base_t:tcp_socket { relabelfrom relabelto };
allow test_socket_noaccept_t fs_t:filesystem associate;
allow test_socket_base_t fs_t:filesystem associate;


# Another socket type, that can't talk to base domain
type test_socket_minimal_t, domain, socketdomain, testdomain;
allow test_socket_minimal_t self:udp_socket create_socket_perms;
allow test_socket_minimal_t self:tcp_socket create_stream_socket_perms;

# Another socket type, that can't use the network at all
type test_socket_none_t, domain, socketdomain, testdomain;
allow test_socket_none_t self:udp_socket create_socket_perms;
allow test_socket_none_t self:tcp_socket create_stream_socket_perms;

# Test domains can create unix domain sockets in the test directory
allow socketdomain test_file_t:dir rw_dir_perms;
allow socketdomain test_file_t:sock_file create_file_perms;
allow socketdomain test_file_t:sock_file rw_file_perms;

# Allow all of these domains to be entered from user domains.
# via a shell script in the test directory.
domain_trans(sysadm_t, test_file_t, socketdomain)

# Also allow entry via some other programs.
domain_trans(sysadm_t, bin_t, socketdomain)

# Allow the user shell to read the /proc/PID entries for these domains.
allow sysadm_t socketdomain:dir r_dir_perms;
allow sysadm_t socketdomain:file r_file_perms;

