
policy_module(test_policy,1.0.0)

###############################################
#
# Declarations
#

attribute testsuite_domain;

optional_policy(`
	gen_require(`
		type unconfined_t;
		role unconfined_r;
	')

	# Transition from the caller to the test domain.
	allow unconfined_t testsuite_domain:process transition;
	role unconfined_r types testsuite_domain;
	# Report back from the test domain to the caller.
	allow testsuite_domain unconfined_t:fd use;
	allow testsuite_domain unconfined_t:fifo_file { read write ioctl getattr };
	allow testsuite_domain unconfined_t:process { sigchld };
')

gen_require(`
	role sysadm_r;
')

# Authorize sysadm_r for the test domains.
role sysadm_r types testsuite_domain;

# Allow the test domains to access the sysadm terminal.
# This allows read and write sysadm ttys and ptys.
term_use_all_terms(testsuite_domain)

# Allow the test domain to use leaked fd from init/init scripts
allow testsuite_domain init_t:fd use;
allow testsuite_domain initrc_t:fd use;

# Allow the test domains to access the test directory and files
# even if they are not root owned.
allow testsuite_domain self:capability { dac_override dac_read_search };

# Let sysadm_t use runcon to run the test programs in various domains.
#allow sysadm_t self:process setexec;
#selinux_get_fs_mount(sysadm_t)

# Let all test domains read test directories and files.
miscfiles_read_test_files(testsuite_domain)

# Let the test domains set their current, exec and fscreate contexts.
allow testsuite_domain self:process setcurrent;
#domain_dyntrans_type(testsuite_domain)
#selinux_get_fs_mount(testsuite_domain)
allow testsuite_domain self:process setexec;

# General permissions commonly required for test operation.
# general_domain_access
allow testsuite_domain self:process ~{fork ptrace setcurrent setexec setfscreate setpgid setrlimit execmem execstack execheap setkeycreate};
allow testsuite_domain self:fd use;
allow testsuite_domain self:fifo_file rw_file_perms;
allow testsuite_domain self:unix_dgram_socket create_socket_perms;
allow testsuite_domain self:unix_stream_socket create_stream_socket_perms;
allow testsuite_domain self:unix_dgram_socket sendto;
files_search_tmp(testsuite_domain)

# permission to use shared library
libs_use_ld_so(testsuite_domain)
libs_use_shared_libs(testsuite_domain)

allow testsuite_domain proc_t:file { getattr read open };
files_list_var(testsuite_domain)
files_list_home(testsuite_domain)
dev_read_rand(testsuite_domain)
files_list_pids(testsuite_domain)
require {
	type root_t;
	type etc_t;
	type bin_t;
	type sbin_t;
	type lib_t;
	type usr_t;
	type devpts_t;
	type devtty_t;
	type null_device_t;
	type zero_device_t;
	type init_t;
	type initrc_t;
	type console_device_t;
}
allow testsuite_domain { root_t etc_t bin_t sbin_t lib_t usr_t devpts_t }:dir list_dir_perms;
allow testsuite_domain lib_t:file read_file_perms;
allow testsuite_domain lib_t:lnk_file read;
allow testsuite_domain etc_t:file read_file_perms;
allow testsuite_domain { devtty_t null_device_t zero_device_t }:chr_file rw_file_perms;
miscfiles_read_localization(testsuite_domain)
domain_use_interactive_fds(testsuite_domain)
seutil_read_config(testsuite_domain)

# can getsecurity
selinux_getattr_fs(testsuite_domain)
selinux_validate_context(testsuite_domain)
selinux_compute_access_vector(testsuite_domain)
selinux_compute_create_context(testsuite_domain)
selinux_compute_relabel_context(testsuite_domain)
selinux_compute_user_contexts(testsuite_domain)

ifdef(`distro_redhat', `
    ifdef(`auth_read_passwd', `
        auth_read_passwd(testsuite_domain)
    ')
')

define(`allow_map',
ifdef(`map_permission_defined', `allow $1 $2:$3 map;')
)

define(`allow_lockdown_integrity',
ifdef(`lockdown_defined', `allow $1 self:lockdown integrity;')
)

define(`allow_lockdown_confidentiality',
ifdef(`lockdown_defined', `allow $1 self:lockdown confidentiality;')
)
