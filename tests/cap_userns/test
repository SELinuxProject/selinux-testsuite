#!/usr/bin/perl

use Test::More;

BEGIN {
    $basedir = $0;
    $basedir =~ s|(.*)/[^/]*|$1|;

    $test_checkpoint = 0;

    if ( -e '/proc/sys/kernel/unprivileged_userns_clone' ) {
        system(
            "echo 1 > /proc/sys/kernel/unprivileged_userns_clone 2> /dev/null");
    }
    if ( system("$basedir/userns_child_exec -t -U > /dev/null 2>&1") != 0 ) {
        plan skip_all => "CLONE_NEWUSER not supported";
    }
    else {
        $test_count = 2;

        # CAP_CHECKPOINT_RESTORE is supported since 5.9
        $kvercur = `uname -r`;
        chomp($kvercur);

        if ( `$basedir/../kvercmp $kvercur 5.9` > 0 ) {
            $test_checkpoint = 1;
            $test_count += 2;
        }

        plan tests => $test_count;
    }
}

# Verify that test_cap_userns_t can mount proc within its own mount namespace.

$result = system(
"runcon -t test_cap_userns_t -- $basedir/userns_child_exec -p -m -U -M '0 0 1' -G '0 0 1' -- true 2>&1"
);
ok( $result eq 0 );

# Verify that test_no_cap_userns_t cannot mount proc within its own mount namespace.

$result = system(
"runcon -t test_no_cap_userns_t -- $basedir/userns_child_exec -p -m -U -M '0 0 1' -G '0 0 1' -- true 2>&1"
);
ok($result);

if ($test_checkpoint) {

    # Verify that test_cap2_userns_t can use cap_checkpoint_restore

    $result = system(
"$basedir/userns_child_exec -p -U -M '0 0 1' -G '0 0 1' -- runcon -t test_cap2_userns_t -- sh -c 'echo 1000 > /proc/sys/kernel/ns_last_pid' 2>&1"
    );
    ok( $result eq 0 );

    # Verify that test_no_cap_userns_t cannot use cap_checkpoint_restore

    $result = system(
"$basedir/userns_child_exec -p -U -M '0 0 1' -G '0 0 1' -- runcon -t test_no_cap2_userns_t -- sh -c 'echo 1000 > /proc/sys/kernel/ns_last_pid' 2>&1"
    );
    ok($result);
}

if ( -e '/proc/sys/kernel/unprivileged_userns_clone' ) {
    system("echo 0 > /proc/sys/kernel/unprivileged_userns_clone 2> /dev/null");
}
